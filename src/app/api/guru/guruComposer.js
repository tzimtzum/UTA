// src/app/api/guru/guruComposer.js

export function composeGuruResponse({
  sources,
  sugyaTree,
  chakira,
  nafkaMinot,
  halachicFlow,
  mode,
}) {
  let output = "";

  output += `# 📚 Mode: ${mode}\n\n`;

  if (sources?.length) {
    output += `## 📖 Primary Torah Sources:\n`;
    sources.forEach((src) => {
      output += `### ${src.title} (${src.type})\n`;
      output += `**Hebrew:** ${src.hebrew}\n\n`;
      output += `**English:** ${src.english}\n\n`;
      if (src.notes) output += `_Note: ${src.notes}_\n\n`;
    });
  }

  if (sugyaTree?.nodes?.length) {
    output += `## 🌳 Sugya Tree:\n`;
    sugyaTree.nodes.forEach((n, i) => {
      output += `- ${i + 1}. **${n.label}** → ${n.description}\n`;
    });
    output += `\n`;
  }

  if (chakira?.question) {
    output += `## 🧠 Brisker Chakira:\n`;
    output += `**Chakira:** ${chakira.question}\n`;
    output += `**Sides:**\n- ${chakira.sideA}\n- ${chakira.sideB}\n\n`;
  }

  if (nafkaMinot?.length) {
    output += `## ⚖️ Nafka Minot:\n`;
    nafkaMinot.forEach((nm) => {
      output += `- **${nm.label}**: ${nm.scenario}\n`;
      output += `  - Halachic Difference: ${nm.halachic_difference}\n`;
      output += `  - Sources: ${nm.relevant_sources.join(", ")}\n\n`;
    });
  }

  if (halachicFlow) {
    output += `## 📜 Halachic Flow:\n`;

    if (halachicFlow.talmud) {
      output += `### Talmud:\n`;
      halachicFlow.talmud.forEach((t) => {
        output += `- ${t.source}: ${t.summary}\n`;
      });
      output += `\n`;
    }

    if (halachicFlow.rishonim) {
      output += `### Rishonim:\n`;
      halachicFlow.rishonim.forEach((r) => {
        output += `- ${r.name} (${r.source}): ${r.view}\n`;
      });
      output += `\n`;
    }

    if (halachicFlow.shulchan_aruch) {
      output += `### Shulchan Aruch:\n`;
      halachicFlow.shulchan_aruch.forEach((sa) => {
        output += `- Siman ${sa.seif}: ${sa.ruling} (Based on: ${sa.aligned_rishonim.join(", ")})\n`;
      });
      output += `\n`;
    }

    if (halachicFlow.acharonim) {
      output += `### Acharonim:\n`;
      halachicFlow.acharonim.forEach((a) => {
        output += `- ${a.name}: ${a.view}\n`;
      });
      output += `\n`;
    }
  }

  return output || "❌ No content generated by agents.";
}
